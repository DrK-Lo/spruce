rnorm(nreps, EffectTime+EffectTimeLowCO2 , stdev)
rnorm(nreps, EffectTime+EffectTimeHighCO2 , stdev)
pval[i,]
m1
p_start
pnew_lowCO2
pnew_highCO2
mean(pnew_highCO2)-mean(p_start)
data1
data2
nreps<-10		#number of repliates in one experiment#
n_start<-5000#
n_end<-5000#
n_reads <- 200#
#
Time <- factor(rep(c("Start", "Start", "End", "End"), each=nreps))#
CO2 <- factor(rep(c("Control", "Elevated", "Control",  "Elevated"), each=nreps))#
reps=1000	#number of times the simulation is replicated to get average p-values#
pval <- matrix(NA, nrow=reps, ncol=4)#
pval_BEST <- pval#
stdev = 0.05 #standard deviation among replicates#
EffectTime<-0#
EffectTimeLowCO2 <- 0#
#
EffectTimeHighCO2<- 0#
#
for (i in 1:reps){#
p_start = rnorm(nreps,runif(1,0.25,0.75),stdev)  #this is the starting allele frequency for each of the 10 populations in the experiment#
p_start[p_start>1] <- 1#
p_start[p_start<0] <- 0												#Effect of C02#
pnew_lowCO2 <- p_start + rnorm(nreps, EffectTime+EffectTimeLowCO2 , stdev)			#assign new allele frequencies for each replicate#
pnew_lowCO2[p_start==1]=1#
pnew_lowCO2[p_start==0]=0#
pnew_lowCO2[pnew_lowCO2>1] <- 1#
pnew_lowCO2[pnew_lowCO2<0] <- 0#
pnew_highCO2 <- p_start + rnorm(nreps, EffectTime+EffectTimeHighCO2 , stdev)			#assign new allele frequencies for each replicate#
pnew_highCO2[p_start==1]=1#
pnew_highCO2[p_start==0]=0#
pnew_highCO2[pnew_highCO2>1] <- 1#
pnew_highCO2[pnew_highCO2<0] <- 0	#
#	outmat_start <- rbinom(nreps, n_start, p_start)#/n_start#
outmat_start <- rbinom(nreps, n_reads, p_start)/n_reads*n_start#
outmat_start_B <- n_start-outmat_start#
#
#	outmat_lowCO2 <- rbinom(nreps, n_end, pnew_lowCO2)#/n_end#
outmat_lowCO2 <- rbinom(nreps, n_reads, pnew_lowCO2)/n_reads*n_end#
outmat_lowCO2_B <- n_end-outmat_lowCO2#
#
#	outmat_highCO2 <- rbinom(nreps, n_end, pnew_highCO2)#/n_end#
outmat_highCO2 <- rbinom(nreps, n_reads, pnew_highCO2)/n_reads*n_end#
outmat_highCO2_B <- n_end-outmat_highCO2#
data1 <- c(outmat_start, outmat_start, outmat_lowCO2, outmat_highCO2)#
data2 <- c(outmat_start_B, outmat_start_B, outmat_lowCO2_B, outmat_highCO2_B)#
data=cbind(data1,data2)#
m1<-glm(data~Time*CO2, family=binomial (link="logit"))#
pval[i,] <- summary(m1)$coef[,4]		#the p-values for all 4 coefficients#
#coef <- rep(NA, 4)#
#best_coef <- summary(step(m1))$coef[,4]		#the p-values for 4 coeffi#
#coef[1:length(best_coef)]<- best_coef#
#pval_BEST[i,] <- coef#
}#
print(c("Number of replicates:", nreps))#
#print(c("Mean Starting allele freq =", mean(p_start)))#
print(c("StDev among replicates = ", stdev))#
print(c("pval for time effect", mean(pval[,2])))	#; mean(pval_BEST[,2])#
print(c("pval for CO2 effect", mean(pval[,3])))#
print(c("pval for Interaction ",  mean(pval[,4])))
length(which(pval[,2]<0.0001))#
length(which(pval[,3]<0.0001))#
length(which(pval[,4]<0.0001))
nreps<-10		#number of repliates in one experiment#
n_start<-5000#
n_end<-5000#
n_reads <- 200#
#
#Time <- factor(rep(c("Start", "Start", "End", "End"), each=nreps))#
#	CO2 <- factor(rep(c("Control", "Elevated", "Control",  "Elevated"), each=nreps))#
Trt <- factor(rep(c("Start", "EndLow", "EndHigh"), each=nreps))#
#
reps=1000	#number of times the simulation is replicated to get average p-values#
pval <- matrix(NA, nrow=reps, ncol=2)#
pval_BEST <- pval#
stdev = 0.05 #standard deviation among replicates#
EffectTime<-0#
EffectTimeLowCO2 <- 0#
EffectTimeHighCO2<- 0
p_start = rnorm(nreps,runif(1,0.25,0.75),stdev)  #this is the starting allele frequency for each of the 10 populations in the experiment#
p_start[p_start>1] <- 1#
p_start[p_start<0] <- 0												#Effect of C02#
pnew_lowCO2 <- p_start + rnorm(nreps, EffectTime+EffectTimeLowCO2 , stdev)			#assign new allele frequencies for each replicate#
pnew_lowCO2[p_start==1]=1#
pnew_lowCO2[p_start==0]=0#
pnew_lowCO2[pnew_lowCO2>1] <- 1#
pnew_lowCO2[pnew_lowCO2<0] <- 0#
pnew_highCO2 <- p_start + rnorm(nreps, EffectTime+EffectTimeHighCO2 , stdev)			#assign new allele frequencies for each replicate#
pnew_highCO2[p_start==1]=1#
pnew_highCO2[p_start==0]=0#
pnew_highCO2[pnew_highCO2>1] <- 1#
pnew_highCO2[pnew_highCO2<0] <- 0	#
#	outmat_start <- rbinom(nreps, n_start, p_start)#/n_start#
outmat_start <- rbinom(nreps, n_reads, p_start)/n_reads*n_start#
outmat_start_B <- n_start-outmat_start#
#
#	outmat_lowCO2 <- rbinom(nreps, n_end, pnew_lowCO2)#/n_end#
outmat_lowCO2 <- rbinom(nreps, n_reads, pnew_lowCO2)/n_reads*n_end#
outmat_lowCO2_B <- n_end-outmat_lowCO2#
#
#	outmat_highCO2 <- rbinom(nreps, n_end, pnew_highCO2)#/n_end#
outmat_highCO2 <- rbinom(nreps, n_reads, pnew_highCO2)/n_reads*n_end#
outmat_highCO2_B <- n_end-outmat_highCO2
data1 <- c(outmat_start, outmat_lowCO2, outmat_highCO2)#
data2 <- c(outmat_start_B, outmat_lowCO2_B, outmat_highCO2_B)
data1
data2
m1<-glm(data~Trt, family=binomial (link="logit"))
Trt
data=cbind(data1,data2)#
m1<-glm(data~Trt, family=binomial (link="logit"))
m1
summary(m1)
tapply(data1, Trt, mean)
tapply(data1, Trt, mean)/5000
tukey.hsd(m1)
tapply(data1, Trt, sd)/5000
data
nreps<-10		#number of repliates in one experiment#
n_start<-5000#
n_end<-5000#
n_reads <- 200#
#
#Time <- factor(rep(c("Start", "Start", "End", "End"), each=nreps))#
#	CO2 <- factor(rep(c("Control", "Elevated", "Control",  "Elevated"), each=nreps))#
Trt <- factor(rep(c("Start", "EndLow", "EndHigh"), each=nreps))#
#
reps=1000	#number of times the simulation is replicated to get average p-values#
pval <- matrix(NA, nrow=reps, ncol=2)#
pval_BEST <- pval#
stdev = 0.05 #standard deviation among replicates#
EffectTime<-0#
EffectTimeLowCO2 <- 0#
EffectTimeHighCO2<- 0
summary(p_start)
p_start = rnorm(nreps,0.5,stdev)#
p_start[p_start>1] <- 1#
p_start[p_start<0] <- 0												#Effect of C02#
pnew_lowCO2 <- p_start + rnorm(nreps, EffectTime+EffectTimeLowCO2 , stdev)			#assign new allele frequencies for each replicate#
pnew_lowCO2[p_start==1]=1#
pnew_lowCO2[p_start==0]=0#
pnew_lowCO2[pnew_lowCO2>1] <- 1#
pnew_lowCO2[pnew_lowCO2<0] <- 0#
pnew_highCO2 <- p_start + rnorm(nreps, EffectTime+EffectTimeHighCO2 , stdev)			#assign new allele frequencies for each replicate#
pnew_highCO2[p_start==1]=1#
pnew_highCO2[p_start==0]=0#
pnew_highCO2[pnew_highCO2>1] <- 1#
pnew_highCO2[pnew_highCO2<0] <- 0	#
#	outmat_start <- rbinom(nreps, n_start, p_start)#/n_start#
outmat_start <- rbinom(nreps, n_reads, p_start)/n_reads*n_start#
outmat_start_B <- n_start-outmat_start#
#
#	outmat_lowCO2 <- rbinom(nreps, n_end, pnew_lowCO2)#/n_end#
outmat_lowCO2 <- rbinom(nreps, n_reads, pnew_lowCO2)/n_reads*n_end#
outmat_lowCO2_B <- n_end-outmat_lowCO2#
#
#	outmat_highCO2 <- rbinom(nreps, n_end, pnew_highCO2)#/n_end#
outmat_highCO2 <- rbinom(nreps, n_reads, pnew_highCO2)/n_reads*n_end#
outmat_highCO2_B <- n_end-outmat_highCO2#
data1 <- c(outmat_start, outmat_lowCO2, outmat_highCO2)#
data2 <- c(outmat_start_B, outmat_lowCO2_B, outmat_highCO2_B)#
data=cbind(data1,data2)#
m1<-glm(data~Trt, family=binomial (link="logit"))#
pval[i,] <- summary(m1)$coef[,4]		#the p-values for all 4 coefficients
summary(m1)
1-pchisq(2493.9,27)
1-pchisq(2493.9,29)
tapply(data1, Trt, mean)/5000
.3/3
.3/3==.1
.3/3<.1
.3/3>.1
unique(c(.3, .4 - .1, .5 - .2, .6 - .3, .7 - .4))
seq(0, 1, by=.1) == .3
all.equal(.3/3, 1)
all.equal(.3/3, .1)
rbinom(20, 1, 0.5)
rbinom(1, 20, 0.5)
rbinom(1, 20, 0.5)/20
rbinom(1, 200, 0.5)/200
FST_obs <- var(p_obs)/(mean(p_obs)*(1-mean(p_obs))
)
p_obs <- c(0.2, 0.3, 0.5, 0.7, 0.9) #vector of allele frequencies
n_vect <- c(20, 30, 40, 50, 60, 79) #vector of sample sizes for each p calculation
rbinom(1, c(10, 20), c(0.5, 0.9))
rbinom(2, c(10, 20), c(0.5, 0.9))
rbinom(2, c(10, 20), c(0.2, 0.9))
rbinom(2, c(10, 20, 100), c(0.2, 0.9))
rbinom(2, c(10, 20, 100), c(0.2, 0.9, 0.1))
rbinom(3, c(10, 20, 100), c(0.2, 0.9, 0.1))
p_hat <- rbinom(n_pops, n_vect, p_obs)
n_pops <- length(p_obs)
p_hat <- rbinom(n_pops, n_vect, p_obs)
p_hat
p_obs <- c(0.2, 0.3, 0.5, 0.7, 0.9) #vector of allele frequencies#
n_vect <- c(20, 30, 40, 50, 60, 79) #vector of sample sizes for each p calculation#
n_pops <- length(p_obs)
p_hat <- rbinom(n_pops, n_vect, p_obs)/n_pops
p_hat
p
p_obs
p_hat
p_hat <- rbinom(n_pops, n_vect, p_obs)/n_vect
n_vect
p_obs <- c(0.2, 0.3, 0.5, 0.7, 0.9) #vector of allele frequencies#
n_vect <- c(20, 30, 40, 50, 60) #vector of sample sizes for each p calculation#
n_pops <- length(p_obs)#
#
FSTcalc <- function(p_obs){var(p_obs)/(mean(p_obs)*(1-mean(p_obs)))}#
#
FST_obs <- FSTcalc(p_obs)#
#
p_hat <- rbinom(n_pops, n_vect, p_obs)/n_vect
p_hat
p
rm(p)
p_obs
p_hat
FST_hat <- FSTcalc(p_hat)
FST_hat
FST_obs
replicate()
replicate
if (length(p_obs)!=length(n_vect)){print ("error in SampleVariance function"); break;}
SampleVariance <- function(p_obs, n_vect, FST_obs){#
n_pops <- length(p_obs)#
p_hat <- rbinom(n_pops, n_vect, p_obs)/n_vect#
FST_hat <- FSTcalc(p_hat)#
FST_var <- (FST_hat-FST_obs)^2#
}
replicate(100, SampleVariance)
replicate(100, SampleVariance(p_obs, n_vect, FST_obs))
replicate(10, SampleVariance(p_obs, n_vect, FST_obs))
MeanSampleVariance <- function(p_obs, n_vect){#
if (length(p_obs)!=length(n_vect)){print ("error in SampleVariance function"); break;}#
FSTcalc <- function(p_obs){var(p_obs)/(mean(p_obs)*(1-mean(p_obs)))}#
FST_obs <- FSTcalc(p_obs)#
SampleVariance <- function(p_obs, n_vect, FST_obs){#
n_pops <- length(p_obs)#
p_hat <- rbinom(n_pops, n_vect, p_obs)/n_vect#
FST_hat <- FSTcalc(p_hat)#
FST_var <- (FST_hat-FST_obs)^2#
}#
return(mean(replicate(1000, SampleVariance(p_obs, n_vect, FST_obs))))#
}
MeanSampleVariance(p_obs, n_vect)
p_obs <- c(0.2, 0.3, 0.5, 0.7, 0.9) #vector of allele frequencies#
n_vect <- c(20, 20, 20, 20, 20) #vector of sample sizes for each p calculation#
MeanSampleVariance(p_obs, n_vect)
1+1
x=2
install.packages("plyr", dependencies = TRUE)
install.packages("knitr", dependencies = TRUE)
install.packages("car", dependencies = TRUE)
help("+")
?"+"
library(gstat)
?gstat
?vgm
hist(rchisq(1))
hist(rchisq(df=1))
hist(rchisq(1000,df=1))
hist(rchisq(1000,df=0))
hist(rchisq(1000,df=0.5))
cbbPalette <- c( "#000000","#009E73", "#e79f00", "#9ad0f3",  "#0072B2", "#D55E00", "#CC79A7", "#F0E442")
?pch
plot(x=1:length(cbbPalette), y=1, pch=19, cex=2, col=cbbPalette)
cbbPalette <- c( "#000000","#009E73", "#e79f00", "#9ad0f3",  "#0072B2", "#D55E00", "#CC79A7", "#F0E442")
plot(x=1:length(cbbPalette), y=rep(1, length(cbbPalette), pch=19, cex=2, col=cbbPalette)
plot(x=1:length(cbbPalette), y=rep(1, length(cbbPalette)), pch=19, cex=2, col=cbbPalette)
plot(x=1:length(cbbPalette), y=rep(1, length(cbbPalette)), pch=19, cex=2, col=cbbPalette)
plot(x=1:length(cbbPalette), y=rep(1, length(cbbPalette)), pch=19, cex=5, col=cbbPalette)
plot(x=1:length(cbbPalette), y=rep(1, length(cbbPalette)), pch=19, cex=5, col=cbbPalette, yaxt=x)
?par
plot(x=1:length(cbbPalette), y=rep(1, length(cbbPalette)), pch=19, cex=5, col=cbbPalette, yaxt="n")
plot(x=1:length(cbbPalette), y=rep(1, length(cbbPalette)), pch=19, cex=5, col=cbbPalette, yaxt="n", bty="n")
plot(x=1:length(cbbPalette), y=rep(1, length(cbbPalette)), pch=19, cex=5, col=cbbPalette, yaxt="n", bty="n", xaxt="n")
plot(x=1:length(cbbPalette), y=rep(1, length(cbbPalette)), pch=19, cex=5, col=cbbPalette, yaxt="n", bty="n", xaxt="n", xlab="", ylab="")
a=1
a=list(1,2,3])
a=list(1,2,3)
a<-function{}
a<-function{a=1}
a<-function(a){a=1}
a<-function(a,b,c){a=1}
?scan
F=2000000; a0=1/(F)*10; a1=1/(a0*F)
GetParams_ABS(a0, a1, F,     0,0.05,0,      0.0, 0.0,10)
GetParams_Prop <- function(a0wt,a1wt, Fwt, red0, red1, redF,  resc0, resc1, rescF){
mu=10^(-5);
n0init=1000000;
#Params in normal climate
#a0wt <- 0.001;
#a1wt<-0.1;
#Fwt <- 10000;
l.wt <- (a0wt*a1wt*Fwt)
#New params under climate change
a0wtcc <- a0wt*(1-red0)
a1wtcc <- a1wt*(1-red1)
Fwtcc <- Fwt*(1-redF)
a0mut<-a0wt*(1+res0);
a1mut<-a1wt(1+res1);
Fmut=Fwt*(1+redF);
l.wtcc <- (a0wtcc*a1wtcc*Fwtcc)^(1/3) #lambda wild type
l.mut <- (a0mut*a1mut*Fmut)^(1/3) #lambda mutant
fixP<- 2*(l.mut^3-1)/(Fmut*(l.mut^3));
numMuts<-(mu*n0init)/(1-l.wtcc);
rescueChance <- 1-exp((2*n0init*(-1+l.mut^3)*mu)/(Fmut*l.mut^3*(-1+l.wtcc)))
rescueApprox <- numMuts*fixP
return(data.frame(a0wt, a1wt, Fwt, mu=mu, n0init=n0init, l.wt=l.wt, l.wtcc=l.wtcc, l.mut=l.mut,
fixP= fixP, numMuts=numMuts,  rescueApprox=rescueApprox, rescueChance =rescueChance ))
}
GetParams_ABS(a0, a1, F,     0,0.05,0,      0.0, 0.0,10)
GetParams_Prop(a0, a1, F,     0,0.05,0,      0.0, 0.0,10)
GetParams_Prop <- function(a0wt,a1wt, Fwt, red0, red1, redF,  res0, res1, resF){
mu=10^(-5);
n0init=1000000;
#Params in normal climate
#a0wt <- 0.001;
#a1wt<-0.1;
#Fwt <- 10000;
l.wt <- (a0wt*a1wt*Fwt)
#New params under climate change
a0wtcc <- a0wt*(1-red0)
a1wtcc <- a1wt*(1-red1)
Fwtcc <- Fwt*(1-redF)
a0mut<-a0wt*(1+res0);
a1mut<-a1wt(1+res1);
Fmut=Fwt*(1+resF);
l.wtcc <- (a0wtcc*a1wtcc*Fwtcc)^(1/3) #lambda wild type
l.mut <- (a0mut*a1mut*Fmut)^(1/3) #lambda mutant
fixP<- 2*(l.mut^3-1)/(Fmut*(l.mut^3));
numMuts<-(mu*n0init)/(1-l.wtcc);
rescueChance <- 1-exp((2*n0init*(-1+l.mut^3)*mu)/(Fmut*l.mut^3*(-1+l.wtcc)))
rescueApprox <- numMuts*fixP
return(data.frame(a0wt, a1wt, Fwt, mu=mu, n0init=n0init, l.wt=l.wt, l.wtcc=l.wtcc, l.mut=l.mut,
fixP= fixP, numMuts=numMuts,  rescueApprox=rescueApprox, rescueChance =rescueChance ))
}
F=2000000; a0=1/(F)*10; a1=1/(a0*F)
GetParams_Prop(a0, a1, F,     0,0.05,0,      0.0, 0.0,10)
GetParams_Prop <- function(a0wt,a1wt, Fwt, red0, red1, redF,  res0, res1, resF){
mu=10^(-5);
n0init=1000000;
#Params in normal climate
#a0wt <- 0.001;
#a1wt<-0.1;
#Fwt <- 10000;
l.wt <- (a0wt*a1wt*Fwt)
#New params under climate change
a0wtcc <- a0wt*(1-red0)
a1wtcc <- a1wt*(1-red1)
Fwtcc <- Fwt*(1-redF)
a0mut<-a0wt*(1+res0);
a1mut<-a1wt*(1+res1);
Fmut=Fwt*(1+resF);
l.wtcc <- (a0wtcc*a1wtcc*Fwtcc)^(1/3) #lambda wild type
l.mut <- (a0mut*a1mut*Fmut)^(1/3) #lambda mutant
fixP<- 2*(l.mut^3-1)/(Fmut*(l.mut^3));
numMuts<-(mu*n0init)/(1-l.wtcc);
rescueChance <- 1-exp((2*n0init*(-1+l.mut^3)*mu)/(Fmut*l.mut^3*(-1+l.wtcc)))
rescueApprox <- numMuts*fixP
return(data.frame(a0wt, a1wt, Fwt, mu=mu, n0init=n0init, l.wt=l.wt, l.wtcc=l.wtcc, l.mut=l.mut,
fixP= fixP, numMuts=numMuts,  rescueApprox=rescueApprox, rescueChance =rescueChance ))
}
GetParams_Prop(a0, a1, F,     0,0.05,0,      0.0, 0.0,10)
F=20; a0=1/(F)*10; a1=1/(a0*F)
GetParams_Prop(a0, a1, F,     0,0.05,0,      0.0, 0.0,10)
F
a0
a1
10
1
F=2000000; a0=1/(F)*10; a1=1/(a0*F)
F*a0*a1
F=2; a0=1/(F)*10; a1=1/(a0*F)
GetParams_Prop(a0, a1, F,     0,0.05,0,      0.0, 0.0,10)
F=1; a0=1/(F)*10; a1=1/(a0*F)
GetParams_Prop(a0, a1, F,     0,0.05,0,      0.0, 0.0,10)
F
a0
a1
F=2; a0=1/(F)*10; a1=1/(a0*F)
GetParams_Prop(a0, a1, F,     0,0.05,0,      0.0, 0.0,10)
a0
a1
F=20; a0=1/(F)*10; a1=1/(a0*F)
GetParams_Prop(a0, a1, F,     0,0.05,0,      0.0, 0.0,10)
F=1; a0=1; a1=1
GetParams_Prop(a0, a1, F,     0,0.05,0,      0.0, 0.0,10)
F=20; a0=1/(F)*10; a1=1/(a0*F)
a0
a1
100*1.1+100*1.2
100*1.1+100*1.2+100*1.3
*.1
360*.1
360*.1
300*0.01
300/1000
1000*3
1000*3/1000
3000/100
30/10
3*0.5
1/1.5
1.5*.66
ls()
rm(list=ls())
ls
ls()
q()
setwd("~/Desktop/AdaptreeData")
setwd("~/spruce")
setwd("spruce")
envi <- read.csv("var_out_588_env.csv")
head(envi)
tail(envi)
bayenv.poporder.seqcap <- read.table("var_out_588ind_all_v2_COMBINED.table.contig_flt10.bayenv.pop_order")
bayenv.poporder.seqcap
popIDs <- paste("Sp_",popID,sep="")
popIDs <- paste("Sp_",envi$popID,sep="")
bayenv.poporder.gbs <- read.table("spruce_GBS_all.table.contig_flt10.bayenv.pop_order")
tail(bayenv.poporder.gbs)
tail(bayenv.poporder.seqcap)
lfmm.poporder.seqcap <- "ind_pop.txt"
lfmm.poporder.seqcap <- read.table("ind_pop.txt")
tail(lfmm.poporder.seqcap)
lfmm.poporder.gbs <- read.table("ind_pop_gbs.txt")
tail(lfmm.poporder.gbs)
goodpopIDs <- popIDs[goodpops]
goodpops <- 1:249
popIDs <- paste("Sp_",envi$popID,sep="")
goodpopIDs <- popIDs[goodpops]
i=1
poplist<-bayenv.poporder.seqcap$V2
which(goodpopIDs==poplist[i])
head(envi)
envimat[index,]<-envi[5:ncol(envi)]
envimat[index,]<-envi[5:ncol(envi)]
envimat <- NULL
envimat[index,]<-envi[5:ncol(envi)]
index<-which(goodpopIDs==poplist[i])
envimat[index,]<-envi[5:ncol(envi)]
which(poplist[i] %in% goodpopIDs)
which(poplist %in% goodpopIDs)
nrows <- which(poplist %in% goodpopIDs)
ncols <- length(5:ncol(envi))
envimat <- matrix(NA, nrow=nrows, ncol=ncols)
index<-which(goodpopIDs==poplist[i])
envimat[index,]<-envi[5:ncol(envi)]
poplist <- lfmm.poporder.gbs$V2
which(poplist %in% goodpopIDs)
ncols <- length(5:ncol(envi))
envimat <- matrix(NA, nrow=nrows, ncol=ncols)
GetEnviMat <- function(poplist){  # poplist is a vector from the dataset  # this function returns the environment matrix corresponding to poplist  nrows <- which(poplist %in% goodpopIDs)  ncols <- length(5:ncol(envi))  envimat <- matrix(NA, nrow=nrows, ncol=ncols)    for (i in 1:length(poplist)){    index<-which(goodpopIDs==poplist[i])    envimat[index,]<-envi[5:ncol(envi)]  }  return(envimat)}
GetEnviMat <- function(poplist){  # poplist is a vector from the dataset  # this function returns the environment matrix corresponding to poplist  nrows <- which(poplist %in% goodpopIDs)  ncols <- length(5:ncol(envi))  envimat <- matrix(NA, nrow=nrows, ncol=ncols)    for (i in 1:length(poplist)){    index<-which(goodpopIDs==poplist[i])    envimat[index,]<-envi[5:ncol(envi)]  }  return(envimat)}
nrows <- which(poplist %in% goodpopIDs)  ncols <- length(5:ncol(envi))  envimat <- matrix(NA, nrow=nrows, ncol=ncols)    for (i in 1:length(poplist)){    index<-which(goodpopIDs==poplist[i])    envimat[index,]<-envi[5:ncol(envi)]  }
nrows <- which(poplist %in% goodpopIDs)  ncols <- length(5:ncol(envi))  envimat <- matrix(NA, nrow=nrows, ncol=ncols)
nrows <- which(poplist %in% goodpopIDs)
ncols <- length(5:ncol(envi))
envimat <- matrix(NA, nrow=nrows, ncol=ncols)
for (i in 1:length(poplist)){
index<-which(goodpopIDs==poplist[i])
envimat[index,]<-envi[5:ncol(envi)]
}
i
i=1
index<-which(goodpopIDs==poplist[i])
index
i=2
index<-which(goodpopIDs==poplist[i])
index
nrows
popNames <- poplist[goodInds]
goodInds <- which(poplist %in% goodpopIDs)
popNames <- poplist[goodInds]
head(popNames)
ncols <- length(5:ncol(envi))
ncols
envimat <- matrix(NA, nrow=length(goodInds), ncol=ncols)
i=1
index<-which(goodpopIDs==poplist[i])
index
i=2
index<-which(goodpopIDs==poplist[i])
index
i=3
index<-which(goodpopIDs==poplist[i])
index
for (i in 1:length(goodInds)){    index<-which(goodpopIDs==poplist[i])    envimat[i,]<-envi[index, 5:ncol(envi)]  }
for (i in 1:length(goodInds)){    index<-which(goodpopIDs==poplist[i])    envimat[i,]<-envi[index, 5:ncol(envi)]  }
for (i in 1:length(goodInds)){
index<-which(goodpopIDs==poplist[i])
envimat[i,]<-envi[index, 5:ncol(envi)]
}
i
envimat[i,]<-envi[index, 5:ncol(envi)]
index
dim(envi)
dim(envimat)
envimat <- matrix(NA, nrow=length(goodInds), ncol=ncols)
envimat[i,]<-envi[index, 5:ncol(envi)]
for (i in 1:length(goodInds)){    index<-which(goodpopIDs==poplist[i])    envimat[i,]<-envi[index, 5:ncol(envi)]  }
for (i in 1:length(goodInds)){    index<-which(goodpopIDs==poplist[i])    envimat[i,]<-envi[index, 5:ncol(envi)]  }
### load environment file from Tonglisetwd("~/Desktop/AdaptreeData")setwd("spruce")envi <- read.csv("var_out_588_env.csv")tail(envi)goodpops <- 1:249popIDs <- paste("Sp_",envi$popID,sep="")goodpopIDs <- popIDs[goodpops]bayenv.poporder.seqcap <- read.table("var_out_588ind_all_v2_COMBINED.table.contig_flt10.bayenv.pop_order")bayenv.poporder.gbs <- read.table("spruce_GBS_all.table.contig_flt10.bayenv.pop_order")lfmm.poporder.seqcap <- read.table("ind_pop.txt")lfmm.poporder.gbs <- read.table("ind_pop_gbs.txt")tail(lfmm.poporder.gbs)
